> # Testing for internet connectivity, the connection to the MODIS SOAP WSDL Server and it's Web Service
> # Description Language, for the XML response from the Web Service method, and for the functions of
> # MODISTools.
> 
> # Load data to be used for testing.
> library(MODISTools)
> data(SubsetExample, FindIDExample, QualityCheckExample, TransectExample, 
+      EndCoordinatesExample, ConvertExample)
> library(RCurl)  # Will use some RCurl and XML functions explicitly in testing.
Loading required package: bitops
> library(XML)
> 
> # Check for internet capability.
> if(!capabilities()["http/ftp"]) q()
> 
> # Check for internet connectivity.
> if(.Platform$OS.type == "unix" && is.null(nsl("cran.r-project.org"))) q()
> 
> # Check we can reach the server for lpdaac modis web service.
> if(.Platform$OS.type == "unix" && is.null(nsl("daac.ornl.gov"))) q()
> 
> urlCheck<- try(curlPerform(url="http://daac.ornl.gov/cgi-bin/MODIS/GLBVIZ_1_Glb_subset/MODIS_webservice.pl"))
> if(class(urlCheck) == "try-error") q()
> 
> # Check the XML response is as expected.
> getsubset.xml <- paste('
+     <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mod="http://daac.ornl.gov/MODIS_webservice">
+                         <soapenv:Header/>
+                         <soapenv:Body>
+                         <mod:getsubset soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
+                         <Latitude xsi:type="xsd:float">', 51.41363, '</Latitude>
+                         <Longitude xsi:type="xsd:float">', -0.64875, '</Longitude>
+                         <Product xsi:type="xsd:string">', "MOD13Q1", '</Product>
+                         <Band xsi:type="xsd:string">', "250m_16_days_EVI", '</Band>
+                         <MODIS_Subset_Start_Date xsi:type="xsd:string">', "A2001001", '</MODIS_Subset_Start_Date>
+                         <MODIS_Subset_End_Date xsi:type="xsd:string">', "A2001025", '</MODIS_Subset_End_Date>
+                         <Km_Above_Below xsi:type="xsd:string">', 0, '</Km_Above_Below>
+                         <Km_Left_Right xsi:type="xsd:string">', 0, '</Km_Left_Right>
+                         </mod:getsubset>
+                         </soapenv:Body>
+                         </soapenv:Envelope>',
+                       sep="")
> 
> header.fields <- c(Accept = "text/xml",
+                     Accept = "multipart/*",
+                    'Content-Type' = "text/xml; charset=utf-8",
+                     SOAPAction="")
> 
> reader <- basicTextGatherer()
> header <- basicTextGatherer()
> curlPerform(url = "http://daac.ornl.gov/cgi-bin/MODIS/GLBVIZ_1_Glb_subset/MODIS_webservice.pl",
+           httpheader = header.fields,
+           postfields = getsubset.xml,
+           writefunction = reader$update,
+           verbose=FALSE)
OK 
 0 
> 
> xmlRoot(xmlTreeParse(reader$value()))
<soap:Envelope encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tns1="http://daac.ornl.gov/MODIS_webservice">
 <soap:Body>
  <getsubsetResponse xmlns="http://daac.ornl.gov/MODIS_webservice">
   <tns1:getsubsetReturn type="tns1:ModisData" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/">
    <xllcorner type="xsd:float">-45172.97</xllcorner>
    <yllcorner type="xsd:float">5716815.61</yllcorner>
    <cellsize type="xsd:float">231.656358264</cellsize>
    <nrows type="xsd:float">1</nrows>
    <ncols type="xsd:float">1</ncols>
    <band type="xsd:string">250m_16_days_EVI</band>
    <units type="xsd:string">EVI ratio - No units</units>
    <scale type="xsd:float">0.0001</scale>
    <latitude type="xsd:float">51.41363</latitude>
    <longitude type="xsd:float">-0.64875</longitude>
    <header type="xsd:string">HDFname,Product,Date,Location,Processed_Date,Subset_Data...</header>
    <subset arrayType="xsd:string[2]" type="soapenc:Array">
     <item type="xsd:string">MOD13Q1.A2001001.h17v03.005.2008270025219.250m_16_days_EVI,MOD13Q1,A2001001,Lat51.41363Lon-0.64875Samp1Line1,2008270025219,2861</item>
     <item type="xsd:string">MOD13Q1.A2001017.h17v03.005.2006357020259.250m_16_days_EVI,MOD13Q1,A2001017,Lat51.41363Lon-0.64875Samp1Line1,2006357020259,2944</item>
    </subset>
   </tns1:getsubsetReturn>
  </getsubsetResponse>
 </soap:Body>
</soap:Envelope>
> 
> # Check GetSubset is producing the correct output.
> # Use GetProducts, GetBands, and GetDates, to specify the GetSubset request.
> Product <- GetProducts()[1]
> Band <- GetBands(Product)[1]
> Dates <- GetDates(SubsetExample$lat, SubsetExample$long, Product)[1:2]
> 
> if(grepl("Server is busy handling other requests", 
+          GetSubset(Lat=SubsetExample$lat, Long=SubsetExample$long, Product="MOD13Q1", 
+                    Band="250m_16_days_EVI", StartDate="A2000049", EndDate="A2000049", 
+                    KmAboveBelow=0, KmLeftRight=0)$subset[1])
+    ){
+   q()
+ } else {
+   GetSubset(Lat=SubsetExample$lat, Long=SubsetExample$long, Product=Product, Band=Band, 
+             StartDate=Dates[1], EndDate=Dates[1], KmAboveBelow=0, KmLeftRight=0)
+ }
        xll        yll     pixelsize nrow ncol          band scale      lat
1 -45404.68 5716815.61 463.312716528    1    1 LC_Property_1     0 51.41363
      long
1 -0.64875
                                                                                                                       subset
1 MCD12Q1.A2001001.h17v03.005.2011055225725.LC_Property_1,MCD12Q1,A2001001,Lat51.41363Lon-0.64875Samp1Line1,2011055225725,255
> 
> # Check FindID example
> FindID(ID=SubsetExample, Data=FindIDExample)
[1] 1
> 
> # Check QualityCheck example
> EVIdata <- QualityCheckExample[1:5, ]
> QAdata <- QualityCheckExample[6:10, ]
> 
> QualityCheck(Data=EVIdata, Product="MOD13Q1", Band="250m_16_days_EVI", NoDataFill=-3000, 
+           QualityBand="250m_16_days_pixel_reliability", QualityScores=QAdata, QualityThreshold=0)
  pixel.1 pixel.2 pixel.3 pixel.4 pixel.5
1    4410    4410    4835    5307    4774
2    4024    4194    4035    3124    4670
3      NA      NA      NA      NA      NA
4    3892    3890    4251    3248    3248
5    4649    4038    3988    3986    4184
> 
> # Check MODIS subset uses this output to produce correctly downloaded files.
> # NOTE: When the server is busy, the file output will be different to expected!
> if(grepl("Server is busy handling other requests", 
+          GetSubset(Lat=SubsetExample$lat, Long=SubsetExample$long, Product="MOD13Q1", 
+                    Band="250m_16_days_EVI", StartDate="A2000049", EndDate="A2000049", 
+                    KmAboveBelow=0, KmLeftRight=0)$subset[1])
+ ){
+   q()
+ } else {
+   MODISSubsets(LoadDat=SubsetExample, Product="MOD13Q1",
+                Bands=c("250m_16_days_EVI","250m_16_days_pixel_reliability"),
+                Size=c(1,1), StartDate=TRUE)
+ }
[1] "Found 1 unique time-series to download."
[1] "Getting subset for location 1 of 1..."
[1] "Full subset download complete. Writing the subset download file..."
[1] "Done! Check the subset download file for correct subset information and any download messages."
Warning message:
In any(band.test) : coercing argument of type 'list' to logical
> 
> # Check example run of MODISSummaries.
> if(grepl("Server is busy handling other requests", 
+          GetSubset(Lat=SubsetExample$lat, Long=SubsetExample$long, Product="MOD13Q1", 
+                    Band="250m_16_days_EVI", StartDate="A2000049", EndDate="A2000049", 
+                    KmAboveBelow=0, KmLeftRight=0)$subset[1])
+ ){
+   q()
+ } else {
+   MODISSummaries(LoadDat=SubsetExample, Product="MOD13Q1", Band="250m_16_days_EVI", 
+                  ValidRange=c(-2000,10000), NoDataFill=-3000, ScaleFactor=0.0001, StartDate=TRUE,
+                  QualityScreen=TRUE, QualityBand="250m_16_days_pixel_reliability", QualityThreshold=0)
+ }
[1] "Processing file 1 of 1..."
[1] "Writing summaries and collecting data..."
[1] "Done! Check files 'MODIS Summary 2013-07-15.csv' and 'MODIS Data 2013-07-15.csv'."
> 
> # Check the MODISSummaries file outputs are consistent.
> SummaryFile <- read.csv(list.files(pattern="MODIS Summary"))
> DataFile <- read.csv(list.files(pattern="MODIS Data"))
> all(SummaryFile$mean.band == DataFile[1,which(grepl("band.pixels", names(DataFile)))])
[1] TRUE
> 
> # Check example of MODISTransects
> if(grepl("Server is busy handling other requests", 
+          GetSubset(Lat=SubsetExample$lat, Long=SubsetExample$long, Product="MOD13Q1", 
+                    Band="250m_16_days_EVI", StartDate="A2000049", EndDate="A2000049", 
+                    KmAboveBelow=0, KmLeftRight=0)$subset[1])
+ ){
+   q()
+ } else {
+   MODISTransects(LoadData=TransectExample, Product="MOD13Q1",     
+           Bands=c("250m_16_days_EVI", "250m_16_days_pixel_reliability"), 
+           Size=c(0,0), StartDate=TRUE)
+ }
[1] "Found 1 transects. Downloading time-series sets for each transect..."
[1] "Found 2 unique time-series to download."
[1] "Getting subset for location 1 of 2..."
[1] "Getting subset for location 2 of 2..."
[1] "Full subset download complete. Writing the subset download file..."
Warning messages:
1: In any(band.test) : coercing argument of type 'list' to logical
2: In any(band.test) : coercing argument of type 'list' to logical
> 
> # Check EndCoordinates example
> EndCoordinates(LoadDat=EndCoordinatesExample, Distance=2000, Angle=90, AngleUnits="degrees")
> 
> # Check ConvertToDD example
> ConvertToDD(XY=ConvertExample, LatColName="lat", LongColName="long")
       DD.lat    DD.long
[1,] 51.40177 -0.6336333
[2,] 51.41537 -0.6462000
[3,] 51.40177 -0.6444000
[4,] 51.41287 -0.6340500
[5,] 51.41420 -0.6488939
[6,] 51.41053 -0.6421589
[7,] 51.41170 -0.6382400
[8,] 51.41327 -0.6450119
> 
> # Check ExtractTile example
> TileExample <- read.csv(list.files(pattern="MODIS Data"))
> TileExample <- TileExample[ ,which(grepl("band.pixels", names(TileExample)))]
> 
> dim(TileExample)
[1]  1 81
> dim(ExtractTile(Data=TileExample, Rows=c(9,2), Cols=c(9,2), Grid=FALSE))
[1]  1 25
> ExtractTile(Data=TileExample, Rows=c(9,2), Cols=c(9,2), Grid=FALSE)
          [,1]      [,2]     [,3]      [,4]      [,5]      [,6]      [,7]
[1,] 0.3799335 0.4007456 0.376501 0.3894108 0.4138817 0.3705727 0.3742467
          [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
[1,] 0.3789888 0.4106913 0.3780576 0.3609897 0.3663994 0.3710234 0.3824075
         [,15]     [,16]     [,17]     [,18]     [,19]     [,20]     [,21]
[1,] 0.3700172 0.3378555 0.3804991 0.3618633 0.3780558 0.3691179 0.3618148
         [,22]     [,23]     [,24]     [,25]
[1,] 0.3925768 0.3905349 0.3734327 0.3689713
> 
> matrix(TileExample, nrow=9, ncol=9, byrow=TRUE)
      [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]     
 [1,] 0.428423  0.4212475 0.3520026 0.4321288 0.5030634 0.5029173 0.4649371
 [2,] 0.4317894 0.4104946 0.3455521 0.3519144 0.4314157 0.4128186 0.39754  
 [3,] 0.4163453 0.4130639 0.3799335 0.3705727 0.3609897 0.3378555 0.3618148
 [4,] 0.4257619 0.418104  0.4007456 0.3742467 0.3663994 0.3804991 0.3925768
 [5,] 0.4042684 0.3831267 0.376501  0.3789888 0.3710234 0.3618633 0.3905349
 [6,] 0.3625021 0.3643448 0.3894108 0.4106913 0.3824075 0.3780558 0.3734327
 [7,] 0.3674653 0.3829601 0.4138817 0.3780576 0.3700172 0.3691179 0.3689713
 [8,] 0.4096427 0.3850499 0.3756149 0.3551992 0.3478013 0.3582401 0.3578968
 [9,] 0.4012113 0.3650902 0.3201863 0.3084471 0.3149235 0.3466468 0.3497902
      [,8]      [,9]     
 [1,] 0.4322581 0.4057131
 [2,] 0.4036014 0.3811317
 [3,] 0.4113128 0.421878 
 [4,] 0.412866  0.4173266
 [5,] 0.3796605 0.389606 
 [6,] 0.3797351 0.3908229
 [7,] 0.3245291 0.3579076
 [8,] 0.3293719 0.3351998
 [9,] 0.3541456 0.3689591
> ExtractTile(Data=TileExample, Rows=c(9,2), Cols=c(9,2), Grid=TRUE)
, , 1

          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 0.3799335 0.3705727 0.3609897 0.3378555 0.3618148
[2,] 0.4007456 0.3742467 0.3663994 0.3804991 0.3925768
[3,] 0.3765010 0.3789888 0.3710234 0.3618633 0.3905349
[4,] 0.3894108 0.4106913 0.3824075 0.3780558 0.3734327
[5,] 0.4138817 0.3780576 0.3700172 0.3691179 0.3689713

> 
> # Check LandCover example
> lc.test <- SubsetExample
> lc.test$start.date <- 2001
> lc.test$end.date <- 2009
> if(grepl("Server is busy handling other requests", 
+          GetSubset(Lat=SubsetExample$lat, Long=SubsetExample$long, Product="MOD13Q1", 
+                    Band="250m_16_days_EVI", StartDate="A2000049", EndDate="A2000049", 
+                    KmAboveBelow=0, KmLeftRight=0)$subset[1])
+ ){
+   q()
+ } else{
+   MODISSubsets(LoadDat=lc.test, Product="MCD12Q1", Bands=c("Land_Cover_Type_1"),
+                Size=c(3,3), StartDate=TRUE)
+ }
[1] "Found 1 unique time-series to download."
[1] "Getting subset for location 1 of 1..."
[1] "Full subset download complete. Writing the subset download file..."
[1] "Done! Check the subset download file for correct subset information and any download messages."
Warning message:
In any(band.test) : coercing argument of type 'list' to logical
> 
> LandCover(Band="Land_Cover_Type_1")
[1] "Some .asc files found in Dir that weren't MODIS downloads of MCD12Q1 product.\n          Selecting only ascii files from MCD12Q1 downloads."
[1] "Processing file 1 of 1..."
[1] "Done! Check the 'MODIS Land Cover Summary 2013-07-15.csv' output."
> 
> proc.time()
   user  system elapsed 
  4.000   0.227 292.776 
